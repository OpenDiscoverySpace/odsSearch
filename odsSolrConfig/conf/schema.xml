<?xml version="1.0" encoding="UTF-8" ?>

<!--


 OpenDiscoverySpace Schema file

 Goal: serve the following languages:

 Language	ISO-639-1 code
    1	 English (original language)	 en
    2	 Dutch	        nl
    3	 French	        fr
    4	 German	        de
    5	 Greek	        el
    6	 Italian	    it
    7	 Spanish	    es
    8	 Croatian	    hr
    9	 Bulgarian	    bg
    10	 Danish	        da
    11	 Finnish	    fi
    12	 Estonian	    et
    13	 Latvian	    lv
    14	 Lithuanian	    lt
    15	 Portuguese	    pt
    16	 Serbian	    sr
    17	 Irish	        ga

 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default)
 or located where the classloader for the Solr webapp can find it.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="drupal-4.1-solr-4.x" version="1.3">
    <!-- attribute "name" is the name of this schema and is only used for display purposes.
         Applications should change this to reflect the nature of the search collection.
         version="1.2" is Solr's version number for the schema syntax and semantics.  It should
         not normally be changed by applications.
         1.0: multiValued attribute did not exist, all fields are multiValued by nature
         1.1: multiValued attribute introduced, false by default
         1.2: omitTermFreqAndPositions attribute introduced, true by default except for text fields.
         1.3: removed optional field compress feature
       -->
    <types>
        <!-- field type definitions. The "name" attribute is
           just a label to be used by field definitions.  The "class"
           attribute and any other attributes determine the real
           behavior of the fieldType.
             Class names starting with "solr" refer to java classes in the
           org.apache.solr.analysis package.
        -->

        <!-- The StrField type is not analyzed, but indexed/stored verbatim.
           - StrField and TextField support an optional compressThreshold which
           limits compression (if enabled in the derived fields) to values which
           exceed a certain size (in characters).
        -->
        <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

        <!-- boolean type: "true" or "false" -->
        <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
        <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
        <fieldtype name="binary" class="solr.BinaryField"/>

        <!-- The optional sortMissingLast and sortMissingFirst attributes are
             currently supported on types that are sorted internally as strings.
           - If sortMissingLast="true", then a sort on this field will cause documents
             without the field to come after documents with the field,
             regardless of the requested sort order (asc or desc).
           - If sortMissingFirst="true", then a sort on this field will cause documents
             without the field to come before documents with the field,
             regardless of the requested sort order.
           - If sortMissingLast="false" and sortMissingFirst="false" (the default),
             then default lucene sorting will be used which places docs without the
             field first in an ascending sort and last in a descending sort.
        -->

        <!-- numeric field types that can be sorted, but are not optimized for range queries -->
        <fieldType name="integer" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
        <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
        <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
        <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>

        <!--
          Note:
          These should only be used for compatibility with existing indexes (created with older Solr versions)
          or if "sortMissingFirst" or "sortMissingLast" functionality is needed. Use Trie based fields instead.

          Numeric field types that manipulate the value into
          a string value that isn't human-readable in its internal form,
          but with a lexicographic ordering the same as the numeric ordering,
          so that range queries work correctly.
        -->
        <fieldType name="sint" class="solr.TrieIntField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="slong" class="solr.TrieFloatField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="sfloat" class="solr.TrieLongField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="sdouble" class="solr.TrieDoubleField" sortMissingLast="true" omitNorms="true"/>

        <!--
         Numeric field types that index each value at various levels of precision
         to accelerate range queries when the number of values between the range
         endpoints is large. See the javadoc for NumericRangeQuery for internal
         implementation details.

         Smaller precisionStep values (specified in bits) will lead to more tokens
         indexed per value, slightly larger index size, and faster range queries.
         A precisionStep of 0 disables indexing at different precision levels.
        -->
        <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
        <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
        <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
        <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>

        <!--
         The ExternalFileField type gets values from an external file instead of the
         index. This is useful for data such as rankings that might change frequently
         and require different update frequencies than the documents they are
         associated with.
        -->
        <fieldType name="pfloat" class="solr.FloatField" omitNorms="true"/>
        <fieldType name="file" keyField="id" defVal="1" stored="false" indexed="false" class="solr.ExternalFileField" valType="pfloat"/>

        <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
           is a more restricted form of the canonical representation of dateTime
           http://www.w3.org/TR/xmlschema-2/#dateTime
           The trailing "Z" designates UTC time and is mandatory.
           Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
           All other components are mandatory.

           Expressions can also be used to denote calculations that should be
           performed relative to "NOW" to determine the value, ie...

                 NOW/HOUR
                    ... Round to the start of the current hour
                 NOW-1DAY
                    ... Exactly 1 day prior to now
                 NOW/DAY+6MONTHS+3DAYS
                    ... 6 months and 3 days in the future from the start of
                        the current day

           Consult the DateField javadocs for more information.
        -->
        <fieldType name="date" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>

        <!-- A Trie based date field for faster date range queries and date faceting. -->
        <fieldType name="tdate" class="solr.TrieDateField" omitNorms="true" precisionStep="6" positionIncrementGap="0"/>

        <!-- solr.TextField allows the specification of custom text analyzers
            specified as a tokenizer and a list of token filters. Different
            analyzers may be specified for indexing and querying.

            The optional positionIncrementGap puts space between multiple fields of
            this type on the same document, with the purpose of preventing false phrase
            matching across fields.

            For more info on customizing your analyzer chain, please see
            http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
        -->

        <!-- One can also specify an existing Analyzer class that has a
             default constructor via the class attribute on the analyzer element
        <fieldType name="text_greek" class="solr.TextField">
          <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
        </fieldType>
        -->

        <!-- A text field that only splits on whitespace for exact matching of words -->
        <fieldType name="text_ws" class="solr.TextField" omitNorms="true" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>

        <!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
        words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
        so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
        Synonyms and stopwords are customized by external files, and stemming is enabled.
        Duplicate tokens at the same position (which may result from Stemmed Synonyms or
        WordDelim parts) are removed.
        -->
        <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!-- in this example, we will only use synonyms at query time
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
                -->
                <!-- Case insensitive stop word removal.
                  add enablePositionIncrements=true in both the index and query
                  analyzers to leave a 'gap' for more accurate phrase queries.
                -->
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="stopwords.txt"
                        enablePositionIncrements="true"
                        />
                <filter class="solr.WordDelimiterFilterFactory"
                        protected="protwords.txt"
                        generateWordParts="1"
                        generateNumberParts="1"
                        catenateWords="1"
                        catenateNumbers="1"
                        catenateAll="0"
                        splitOnCaseChange="1"
                        preserveOriginal="1"/>
                <filter class="solr.LengthFilterFactory" min="2" max="100" />
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="stopwords.txt"
                        enablePositionIncrements="true"
                        />
                <filter class="solr.WordDelimiterFilterFactory"
                        protected="protwords.txt"
                        generateWordParts="1"
                        generateNumberParts="1"
                        catenateWords="0"
                        catenateNumbers="0"
                        catenateAll="0"
                        splitOnCaseChange="1"
                        preserveOriginal="1"/>
                <filter class="solr.LengthFilterFactory" min="2" max="100" />
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldType>

        <!-- An unstemmed text field - good if one does not know the language of the field -->
        <fieldType name="text_und" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
                <filter class="solr.WordDelimiterFilterFactory"
                        protected="protwords.txt"
                        generateWordParts="1"
                        generateNumberParts="1"
                        catenateWords="1"
                        catenateNumbers="1"
                        catenateAll="0"
                        splitOnCaseChange="0"/>
                <filter class="solr.LengthFilterFactory" min="2" max="100" />
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="stopwords.txt"
                        enablePositionIncrements="true"
                        />
                <filter class="solr.WordDelimiterFilterFactory"
                        protected="protwords.txt"
                        generateWordParts="1"
                        generateNumberParts="1"
                        catenateWords="0"
                        catenateNumbers="0"
                        catenateAll="0"
                        splitOnCaseChange="0"/>
                <filter class="solr.LengthFilterFactory" min="2" max="100" />
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>

        <!-- Edge N gram type - for example for matching against queries with results
          KeywordTokenizer leaves input string intact as a single term.
          see: http://www.lucidimagination.com/blog/2009/09/08/auto-suggest-from-popular-queries-using-edgengrams/
        -->
        <fieldType name="edge_n2_kw_text" class="solr.TextField" omitNorms="true" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.EdgeNGramFilterFactory" minGramSize="2" maxGramSize="25" />
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>
        <!--  Setup simple analysis for spell checking -->

        <fieldType name="textSpell" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.StandardTokenizerFactory" />
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.LengthFilterFactory" min="4" max="20" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
            </analyzer>
        </fieldType>

        <!-- This is an example of using the KeywordTokenizer along
           With various TokenFilterFactories to produce a sortable field
           that does not include some properties of the source text
        -->
        <fieldType name="sortString" class="solr.TextField" sortMissingLast="true" omitNorms="true">
            <analyzer>
                <!-- KeywordTokenizer does no actual tokenizing, so the entire
                  input string is preserved as a single token
                -->
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <!-- The LowerCase TokenFilter does what you expect, which can be
                  when you want your sorting to be case insensitive
                -->
                <filter class="solr.LowerCaseFilterFactory" />
                <!-- The TrimFilter removes any leading or trailing whitespace -->
                <filter class="solr.TrimFilterFactory" />
                <!-- The PatternReplaceFilter gives you the flexibility to use
                    Java Regular expression to replace any sequence of characters
                    matching a pattern with an arbitrary replacement string,
                    which may include back refrences to portions of the orriginal
                    string matched by the pattern.

                    See the Java Regular Expression documentation for more
                    infomation on pattern and replacement string syntax.

                    http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/package-summary.html

                <filter class="solr.PatternReplaceFilterFactory"
                       pattern="(^\p{Punct}+)" replacement="" replace="all"
                />
                -->
            </analyzer>
        </fieldType>

        <!-- A random sort type -->
        <fieldType name="rand" class="solr.RandomSortField" indexed="true" />

        <!-- since fields of this type are by default not stored or indexed, any data added to
           them will be ignored outright
        -->
        <fieldtype name="ignored" stored="false" indexed="false" class="solr.StrField" />

        <!-- Begin added types to use features in Solr 3.4+ -->
        <fieldType name="point" class="solr.PointType" dimension="2" subFieldType="tdouble"/>

        <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
        <fieldType name="location" class="solr.LatLonType" subFieldType="tdouble"/>

        <!-- A Geohash is a compact representation of a latitude longitude pair in a single field.
            See http://wiki.apache.org/solr/SpatialSearch
        -->
        <fieldtype name="geohash" class="solr.GeoHashField"/>
        <!-- End added Solr 3.4+ types -->


        <!-- ported from http://opendiscoveryspace.hoplahup.net/beta/admin/config/search/apachesolr/confgen - Aug 7th 2013 - PL -->
        <fieldType name="text_sr" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/> <!-- mapping="mapping-ISOLatin1Accent_sr.txt" -->
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!-- in this example, we will only use synonyms at query time
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
                -->
                <!-- Case insensitive stop word removal.
                  add enablePositionIncrements=true in both the index and query
                  analyzers to leave a 'gap' for more accurate phrase queries.
                -->
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/><!-- words="stopwords_sr.txt" -->
                <filter class="solr.WordDelimiterFilterFactory" protected="protwords.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/> <!-- protected="protwords_sr.txt" -->
                <filter class="solr.LengthFilterFactory" min="2" max="100"/>
                <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_sr.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>

                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/> <!-- mapping="mapping-ISOLatin1Accent_sr.txt" -->
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/><!-- synonyms="synonyms_sr.txt" -->
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/><!-- words="stopwords_sr.txt" -->
                <filter class="solr.WordDelimiterFilterFactory" protected="protwords.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/><!-- protected="protwords_sr.txt" -->
                <filter class="solr.LengthFilterFactory" min="2" max="100"/>
                <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/><!-- dictionary="compoundwords_sr.txt"-->

                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldType><fieldType name="text_pt-pt" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_pt-pt.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_pt-pt.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_pt-pt.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Portuguese" protected="protwords_pt-pt.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_pt-pt.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_pt-pt.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_pt-pt.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_pt-pt.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Portuguese" protected="protwords_pt-pt.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_nl" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_nl.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_nl.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_nl.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Dutch" protected="protwords_nl.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_nl.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_nl.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_nl.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_nl.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Dutch" protected="protwords_nl.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_lv" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_lv.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_lv.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_lv.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>

            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_lv.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_lv.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_lv.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_lv.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>

            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_lt" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_lt.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_lt.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_lt.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>

            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_lt.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_lt.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_lt.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_lt.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>

            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_it" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_it.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_it.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_it.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Italian" protected="protwords_it.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_it.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_it.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_it.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_it.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Italian" protected="protwords_it.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_hr" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_hr.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_hr.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_hr.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>

            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_hr.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_hr.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_hr.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_hr.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>

            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_fr" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_fr.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_fr.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_fr.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="French" protected="protwords_fr.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_fr.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_fr.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_fr.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_fr.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="French" protected="protwords_fr.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_fi" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_fi.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_fi.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_fi.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Finnish" protected="protwords_fi.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_fi.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_fi.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_fi.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_fi.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Finnish" protected="protwords_fi.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_et" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_et.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_et.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_et.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>

            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_et.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_et.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_et.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_et.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>

            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_es" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_es.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_es.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_es.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Spanish" protected="protwords_es.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_es.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_es.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_es.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_es.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Spanish" protected="protwords_es.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_en.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_en.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_en.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords_en.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_en.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_en.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_en.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_en.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords_en.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_de" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_de.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_de.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_de.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="German" protected="protwords_de.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_de.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_de.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_de.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_de.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="German" protected="protwords_de.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_da" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_da.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_da.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_da.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Danish" protected="protwords_da.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_da.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_da.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_da.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_da.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Danish" protected="protwords_da.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="text_bg" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_bg.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_bg.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_bg.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>

            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms_bg.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_bg.txt" enablePositionIncrements="true"/>
            <filter class="solr.WordDelimiterFilterFactory" protected="protwords_bg.txt" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1" preserveOriginal="1" splitOnNumerics="1" stemEnglishPossessive="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_bg.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>

            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType>


        <fieldType name="textSpell_sr" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_sr.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/><!-- words="stopwords_sr.txt" -->
                <filter class="solr.LengthFilterFactory" min="4" max="20"/>
                <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/><!-- dictionary="compoundwords_sr.txt" -->
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldType><fieldType name="textSpell_pt-pt" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_pt-pt.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_pt-pt.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_pt-pt.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_nl" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_nl.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_nl.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_nl.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_lv" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_lv.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_lv.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_lv.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_lt" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_lt.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_lt.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_lt.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_it" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_it.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_it.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_it.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_hr" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_hr.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_hr.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_hr.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_fr" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_fr.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_fr.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_fr.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_fi" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_fi.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_fi.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_fi.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_et" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_et.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_et.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_et.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_es" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_es.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_es.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_es.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_en" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_en.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_en.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_en.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_de" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_de.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_de.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_de.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_da" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_da.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_da.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_da.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType><fieldType name="textSpell_bg" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_bg.txt"/><filter class="solr.WordDelimiterFilterFactory" protected="protwords_bg.txt" splitOnCaseChange="1" splitOnNumerics="1" stemEnglishPossessive="1" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/><filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="compoundwords_bg.txt" minWordSize="5" minSubwordSize="4" maxSubwordSize="15" onlyLongestMatch="true"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType>



    </types>

    <!-- Following is a dynamic way to include other types, added by other contrib modules -->
    <xi:include href="schema_extra_types.xml" xmlns:xi="http://www.w3.org/2001/XInclude">
        <xi:fallback></xi:fallback>
    </xi:include>

    <fields>
        <!-- Valid attributes for fields:
          name: mandatory - the name for the field
          type: mandatory - the name of a previously defined type from the <types> section
          indexed: true if this field should be indexed (searchable or sortable)
          stored: true if this field should be retrievable
          compressed: [false] if this field should be stored using gzip compression
           (this will only apply if the field type is compressable; among
           the standard field types, only TextField and StrField are)
          multiValued: true if this field may contain multiple values per document
          omitNorms: (expert) set to true to omit the norms associated with
           this field (this disables length normalization and index-time
           boosting for the field, and saves some memory).  Only full-text
           fields or fields that need an index-time boost need norms.
        -->

        <!-- The document id is usually derived from a site-spcific key (hash) and the
          entity type and ID like:
          Search Api :
            The format used is $document->id = $index_id . '-' . $item_id
          Apache Solr Search Integration
            The format used is $document->id = $site_hash . '/' . $entity_type . '/' . $entity->id;
        -->
        <field name="id" type="string" indexed="true" stored="true" required="true" />

        <!-- Search Api specific fields -->
        <!-- item_id contains the entity ID, e.g. a node's nid. -->
        <field name="item_id"  type="string" indexed="true" stored="true" />
        <!-- index_id is the machine name of the search index this entry belongs to. -->
        <field name="index_id" type="string" indexed="true" stored="true" />
        <!-- Since sorting by ID is explicitly allowed, store item_id also in a sortable way. -->
        <copyField source="item_id" dest="sort_search_api_id" />

        <!-- Apache Solr Search Integration specific fields -->
        <!-- entity_id is the numeric object ID, e.g. Node ID, File ID -->
        <field name="entity_id"  type="long" indexed="true" stored="true" />
        <!-- entity_type is 'node', 'file', 'user', or some other Drupal object type -->
        <field name="entity_type" type="string" indexed="true" stored="true" />
        <!-- bundle is a node type, or as appropriate for other entity types -->
        <field name="bundle" type="string" indexed="true" stored="true"/>
        <field name="bundle_name" type="string" indexed="true" stored="true"/>
        <field name="site" type="string" indexed="true" stored="true"/>
        <field name="hash" type="string" indexed="true" stored="true"/>
        <field name="url" type="string" indexed="true" stored="true"/>
        <!-- label is the default field for a human-readable string for this entity (e.g. the title of a node) -->
        <field name="label" type="text" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_sr" type="text_sr" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_pt-pt" type="text_pt-pt" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_nl" type="text_nl" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_lv" type="text_lv" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_lt" type="text_lt" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_it" type="text_it" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_hr" type="text_hr" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_fr" type="text_fr" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_fi" type="text_fi" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_et" type="text_et" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_es" type="text_es" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_en" type="text_en" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_de" type="text_de" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_da" type="text_da" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_label_bg" type="text_bg" indexed="true" stored="true" termVectors="true" omitNorms="true"/>
        <!-- The string version of the title is used for sorting -->
        <copyField source="label" dest="sort_label"/>

        <!-- content is the default field for full text search - dump crap here -->
        <field name="content" type="text" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_sr" type="text_sr" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_pt-pt" type="text_pt-pt" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_nl" type="text_nl" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_lv" type="text_lv" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_lt" type="text_lt" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_it" type="text_it" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_hr" type="text_hr" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_fr" type="text_fr" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_fi" type="text_fi" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_et" type="text_et" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_es" type="text_es" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_en" type="text_en" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_de" type="text_de" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_da" type="text_da" indexed="true" stored="true" termVectors="true"/><field name="i18n_content_bg" type="text_bg" indexed="true" stored="true" termVectors="true"/>
        <field name="teaser" type="text" indexed="false" stored="true"/><field name="i18n_teaser_sr" type="text_sr" indexed="false" stored="true"/><field name="i18n_teaser_pt-pt" type="text_pt-pt" indexed="false" stored="true"/><field name="i18n_teaser_nl" type="text_nl" indexed="false" stored="true"/><field name="i18n_teaser_lv" type="text_lv" indexed="false" stored="true"/><field name="i18n_teaser_lt" type="text_lt" indexed="false" stored="true"/><field name="i18n_teaser_it" type="text_it" indexed="false" stored="true"/><field name="i18n_teaser_hr" type="text_hr" indexed="false" stored="true"/><field name="i18n_teaser_fr" type="text_fr" indexed="false" stored="true"/><field name="i18n_teaser_fi" type="text_fi" indexed="false" stored="true"/><field name="i18n_teaser_et" type="text_et" indexed="false" stored="true"/><field name="i18n_teaser_es" type="text_es" indexed="false" stored="true"/><field name="i18n_teaser_en" type="text_en" indexed="false" stored="true"/><field name="i18n_teaser_de" type="text_de" indexed="false" stored="true"/><field name="i18n_teaser_da" type="text_da" indexed="false" stored="true"/><field name="i18n_teaser_bg" type="text_bg" indexed="false" stored="true"/>
        <field name="path" type="string" indexed="true" stored="true"/>
        <field name="path_alias" type="text" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_sr" type="text_sr" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_pt-pt" type="text_pt-pt" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_nl" type="text_nl" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_lv" type="text_lv" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_lt" type="text_lt" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_it" type="text_it" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_hr" type="text_hr" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_fr" type="text_fr" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_fi" type="text_fi" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_et" type="text_et" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_es" type="text_es" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_en" type="text_en" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_de" type="text_de" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_da" type="text_da" indexed="true" stored="true" termVectors="true" omitNorms="true"/><field name="i18n_path_alias_bg" type="text_bg" indexed="true" stored="true" termVectors="true" omitNorms="true"/>
        <!-- <field name="content" type="text" indexed="true" stored="true" termVectors="true"/>
 <field name="teaser" type="text" indexed="false" stored="true"/>
 <field name="path" type="string" indexed="true" stored="true"/>
 <field name="path_alias" type="text" indexed="true" stored="true" termVectors="true" omitNorms="true"/> -->

        <!-- These are the fields that correspond to a Drupal node. The beauty of having
Lucene store title, body, type, etc., is that we retrieve them with the search
result set and don't need to go to the database with a node_load. -->
        <field name="tid"  type="long" indexed="true" stored="true" multiValued="true"/>
        <field name="taxonomy_names" type="text" indexed="true" stored="false" termVectors="true" multiValued="true" omitNorms="true"/>
        <!-- Copy terms to a single field that contains all taxonomy term names -->
        <copyField source="tm_vid_*" dest="taxonomy_names"/>

        <!-- Here, default is used to create a "timestamp" field indicating
    when each document was indexed.-->
        <field name="timestamp" type="tdate" indexed="true" stored="true" default="NOW" multiValued="false"/>

        <!-- This field is used to build the spellchecker index -->
        <field name="spell" type="textSpell" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_sr" type="textSpell_sr" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_pt-pt" type="textSpell_pt-pt" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_nl" type="textSpell_nl" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_lv" type="textSpell_lv" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_lt" type="textSpell_lt" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_it" type="textSpell_it" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_hr" type="textSpell_hr" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_fr" type="textSpell_fr" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_fi" type="textSpell_fi" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_et" type="textSpell_et" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_es" type="textSpell_es" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_en" type="textSpell_en" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_de" type="textSpell_de" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_da" type="textSpell_da" indexed="true" stored="true" multiValued="true"/><field name="i18n_spell_bg" type="textSpell_bg" indexed="true" stored="true" multiValued="true"/>
        <!--     <field name="spell" type="textSpell" indexed="true" stored="true" multiValued="true"/> -->

        <!-- copyField commands copy one field to another at the time a document
is added to the index.  It's used either to index the same field differently,
or to add multiple fields to the same field for easier/faster searching.  -->
        <!-- <copyField source="label" dest="spell"/>
     <copyField source="content" dest="spell"/>

     <copyField source="ts_*" dest="spell"/>
     <copyField source="tm_*" dest="spell"/> -->
        <copyField source="label" dest="spell"/><copyField source="i18n_label_sr" dest="i18n_spell_sr"/><copyField source="i18n_label_pt-pt" dest="i18n_spell_pt-pt"/><copyField source="i18n_label_nl" dest="i18n_spell_nl"/><copyField source="i18n_label_lv" dest="i18n_spell_lv"/><copyField source="i18n_label_lt" dest="i18n_spell_lt"/><copyField source="i18n_label_it" dest="i18n_spell_it"/><copyField source="i18n_label_hr" dest="i18n_spell_hr"/><copyField source="i18n_label_fr" dest="i18n_spell_fr"/><copyField source="i18n_label_fi" dest="i18n_spell_fi"/><copyField source="i18n_label_et" dest="i18n_spell_et"/><copyField source="i18n_label_es" dest="i18n_spell_es"/><copyField source="i18n_label_en" dest="i18n_spell_en"/><copyField source="i18n_label_de" dest="i18n_spell_de"/><copyField source="i18n_label_da" dest="i18n_spell_da"/><copyField source="i18n_label_bg" dest="i18n_spell_bg"/>
        <copyField source="content" dest="spell"/><copyField source="i18n_content_sr" dest="i18n_spell_sr"/><copyField source="i18n_content_pt-pt" dest="i18n_spell_pt-pt"/><copyField source="i18n_content_nl" dest="i18n_spell_nl"/><copyField source="i18n_content_lv" dest="i18n_spell_lv"/><copyField source="i18n_content_lt" dest="i18n_spell_lt"/><copyField source="i18n_content_it" dest="i18n_spell_it"/><copyField source="i18n_content_hr" dest="i18n_spell_hr"/><copyField source="i18n_content_fr" dest="i18n_spell_fr"/><copyField source="i18n_content_fi" dest="i18n_spell_fi"/><copyField source="i18n_content_et" dest="i18n_spell_et"/><copyField source="i18n_content_es" dest="i18n_spell_es"/><copyField source="i18n_content_en" dest="i18n_spell_en"/><copyField source="i18n_content_de" dest="i18n_spell_de"/><copyField source="i18n_content_da" dest="i18n_spell_da"/><copyField source="i18n_content_bg" dest="i18n_spell_bg"/>

        <!-- <copyField source="ts_*" dest="spell"/>
     <copyField source="i18n_ts_*_sr" dest="i18n_spell_sr"/>
     <copyField source="i18n_ts_*_pt-pt" dest="i18n_spell_pt-pt"/>
     <copyField source="i18n_ts_*_nl" dest="i18n_spell_nl"/>
     <copyField source="i18n_ts_*_lv" dest="i18n_spell_lv"/>
     <copyField source="i18n_ts_*_lt" dest="i18n_spell_lt"/>
     <copyField source="i18n_ts_*_it" dest="i18n_spell_it"/>
     <copyField source="i18n_ts_*_hr" dest="i18n_spell_hr"/>
     <copyField source="i18n_ts_*_fr" dest="i18n_spell_fr"/>
     <copyField source="i18n_ts_*_fi" dest="i18n_spell_fi"/>
     <copyField source="i18n_ts_*_et" dest="i18n_spell_et"/>
     <copyField source="i18n_ts_*_es" dest="i18n_spell_es"/>
     <copyField source="i18n_ts_*_en" dest="i18n_spell_en"/>
     <copyField source="i18n_ts_*_de" dest="i18n_spell_de"/>
     <copyField source="i18n_ts_*_da" dest="i18n_spell_da"/>
     <copyField source="i18n_ts_*_bg" dest="i18n_spell_bg"/> -->
        <!-- <copyField source="tm_*" dest="spell"/><copyField source="i18n_tm_*_sr" dest="i18n_spell_sr"/><copyField source="i18n_tm_*_pt-pt" dest="i18n_spell_pt-pt"/><copyField source="i18n_tm_*_nl" dest="i18n_spell_nl"/><copyField source="i18n_tm_*_lv" dest="i18n_spell_lv"/><copyField source="i18n_tm_*_lt" dest="i18n_spell_lt"/><copyField source="i18n_tm_*_it" dest="i18n_spell_it"/><copyField source="i18n_tm_*_hr" dest="i18n_spell_hr"/><copyField source="i18n_tm_*_fr" dest="i18n_spell_fr"/><copyField source="i18n_tm_*_fi" dest="i18n_spell_fi"/><copyField source="i18n_tm_*_et" dest="i18n_spell_et"/><copyField source="i18n_tm_*_es" dest="i18n_spell_es"/><copyField source="i18n_tm_*_en" dest="i18n_spell_en"/><copyField source="i18n_tm_*_de" dest="i18n_spell_de"/><copyField source="i18n_tm_*_da" dest="i18n_spell_da"/><copyField source="i18n_tm_*_bg" dest="i18n_spell_bg"/> -->


        <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
will be used if the name matches any of the patterns.
RESTRICTION: the glob-like pattern in the name attribute must have
a "*" only at the start or the end.
EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
Longer patterns will be matched first.  if equal size patterns
both match, the first appearing in the schema will be used.  -->

        <!-- A set of fields to contain text extracted from HTML tag contents which we
   can boost at query time. -->
        <dynamicField name="tags_*" type="text"   indexed="true" stored="false" omitNorms="true"/>

        <!-- For 2 and 3 letter prefix dynamic fields, the 1st letter indicates the data type and
the last letter is 's' for single valued, 'm' for multi-valued -->

        <!-- We use long for integer since 64 bit ints are now common in PHP. -->
        <dynamicField name="is_*"  type="long"    indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="im_*"  type="long"    indexed="true"  stored="true" multiValued="true"/>
        <!-- List of floats can be saved in a regular float field -->
        <dynamicField name="fs_*"  type="float"   indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="fm_*"  type="float"   indexed="true"  stored="true" multiValued="true"/>
        <!-- List of doubles can be saved in a regular double field -->
        <dynamicField name="ps_*"  type="double"   indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="pm_*"  type="double"   indexed="true"  stored="true" multiValued="true"/>
        <!-- List of booleans can be saved in a regular boolean field -->
        <dynamicField name="bm_*"  type="boolean" indexed="true"  stored="true" multiValued="true"/>
        <dynamicField name="bs_*"  type="boolean" indexed="true"  stored="true" multiValued="false"/>
        <!-- Regular text (without processing) can be stored in a string field-->
        <dynamicField name="ss_*"  type="string"  indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="sm_*"  type="string"  indexed="true"  stored="true" multiValued="true"/>
        <!-- Normal text fields are for full text - the relevance of a match depends on the length of the text -->
        <!-- <dynamicField name="ts_*"  type="text"    indexed="true"  stored="true" multiValued="false" termVectors="true"/>
<dynamicField name="tm_*"  type="text"    indexed="true"  stored="true" multiValued="true" termVectors="true"/> -->
        <dynamicField name="ts_*" type="text" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_sr_*" type="text_sr" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_pt-pt_*" type="text_pt-pt" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_nl_*" type="text_nl" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_lv_*" type="text_lv" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_lt_*" type="text_lt" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_it_*" type="text_it" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_hr_*" type="text_hr" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_fr_*" type="text_fr" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_fi_*" type="text_fi" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_et_*" type="text_et" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_es_*" type="text_es" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_en_*" type="text_en" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_de_*" type="text_de" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_da_*" type="text_da" indexed="true" stored="true" multiValued="false" termVectors="true"/><dynamicField name="i18n_ts_bg_*" type="text_bg" indexed="true" stored="true" multiValued="false" termVectors="true"/>
        <dynamicField name="tm_*" type="text" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_sr_*" type="text_sr" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_pt-pt_*" type="text_pt-pt" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_nl_*" type="text_nl" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_lv_*" type="text_lv" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_lt_*" type="text_lt" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_it_*" type="text_it" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_hr_*" type="text_hr" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_fr_*" type="text_fr" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_fi_*" type="text_fi" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_et_*" type="text_et" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_es_*" type="text_es" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_en_*" type="text_en" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_de_*" type="text_de" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_da_*" type="text_da" indexed="true" stored="true" multiValued="true" termVectors="true"/><dynamicField name="i18n_tm_bg_*" type="text_bg" indexed="true" stored="true" multiValued="true" termVectors="true"/>
        <!-- Unstemmed text fields for full text - the relevance of a match depends on the length of the text -->
        <dynamicField name="tus_*" type="text_und" indexed="true"  stored="true" multiValued="false" termVectors="true"/>
        <dynamicField name="tum_*" type="text_und" indexed="true"  stored="true" multiValued="true" termVectors="true"/>
        <!-- These text fields omit norms - useful for extracted text like taxonomy_names -->
        <dynamicField name="tos_*" type="text"    indexed="true"  stored="true" multiValued="false" termVectors="true" omitNorms="true"/>
        <dynamicField name="tom_*" type="text"    indexed="true"  stored="true" multiValued="true" termVectors="true" omitNorms="true"/>
        <!-- Special-purpose text fields -->
        <dynamicField name="tes_*" type="edge_n2_kw_text" indexed="true" stored="true" multiValued="false" omitTermFreqAndPositions="true" />
        <dynamicField name="tem_*" type="edge_n2_kw_text" indexed="true" stored="true" multiValued="true" omitTermFreqAndPositions="true" />
        <dynamicField name="tws_*" type="text_ws" indexed="true" stored="true" multiValued="false"/>
        <dynamicField name="twm_*" type="text_ws" indexed="true" stored="true" multiValued="true"/>

        <!-- trie dates are preferred, so give them the 2 letter prefix -->
        <dynamicField name="ds_*"  type="tdate"   indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="dm_*"  type="tdate"   indexed="true"  stored="true" multiValued="true"/>
        <dynamicField name="its_*" type="tlong"   indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="itm_*" type="tlong"   indexed="true"  stored="true" multiValued="true"/>
        <dynamicField name="fts_*" type="tfloat"  indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="ftm_*" type="tfloat"  indexed="true"  stored="true" multiValued="true"/>
        <dynamicField name="pts_*" type="tdouble" indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="ptm_*" type="tdouble" indexed="true"  stored="true" multiValued="true"/>
        <!-- Binary fields can be populated using base64 encoded data. Useful e.g. for embedding
a small image in a search result using the data URI scheme -->
        <dynamicField name="xs_*"  type="binary"  indexed="false" stored="true" multiValued="false"/>
        <dynamicField name="xm_*"  type="binary"  indexed="false" stored="true" multiValued="true"/>
        <!-- In rare cases a date rather than tdate is needed for sortMissingLast -->
        <dynamicField name="dds_*" type="date"    indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="ddm_*" type="date"    indexed="true"  stored="true" multiValued="true"/>
        <!-- Sortable fields, good for sortMissingLast support &
We use long for integer since 64 bit ints are now common in PHP. -->
        <dynamicField name="iss_*" type="slong"   indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="ism_*" type="slong"   indexed="true"  stored="true" multiValued="true"/>
        <!-- In rare cases a sfloat rather than tfloat is needed for sortMissingLast -->
        <dynamicField name="fss_*" type="sfloat"  indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="fsm_*" type="sfloat"  indexed="true"  stored="true" multiValued="true"/>
        <dynamicField name="pss_*" type="sdouble" indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="psm_*" type="sdouble" indexed="true"  stored="true" multiValued="true"/>
        <!-- In case a 32 bit int is really needed, we provide these fields. 'h' is mnemonic for 'half word', i.e. 32 bit on 64 arch -->
        <dynamicField name="hs_*" type="integer" indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="hm_*" type="integer" indexed="true"  stored="true" multiValued="true"/>
        <dynamicField name="hss_*" type="sint"   indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="hsm_*" type="sint"   indexed="true"  stored="true" multiValued="true"/>
        <dynamicField name="hts_*" type="tint"   indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="htm_*" type="tint"   indexed="true"  stored="true" multiValued="true"/>

        <!-- Unindexed string fields that can be used to store values that won't be searchable -->
        <dynamicField name="zs_*" type="string"   indexed="false"  stored="true" multiValued="false"/>
        <dynamicField name="zm_*" type="string"   indexed="false"  stored="true" multiValued="true"/>

        <!-- Begin added fields to use features in Solr 3.4+
       http://wiki.apache.org/solr/SpatialSearch#geodist_-_The_distance_function -->
        <dynamicField name="points_*" type="point" indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="pointm_*" type="point" indexed="true"  stored="true" multiValued="true"/>
        <dynamicField name="locs_*" type="location" indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="locm_*" type="location" indexed="true"  stored="true" multiValued="true"/>
        <dynamicField name="geos_*" type="geohash" indexed="true"  stored="true" multiValued="false"/>
        <dynamicField name="geom_*" type="geohash" indexed="true"  stored="true" multiValued="true"/>

        <!-- External file fields -->
        <dynamicField name="eff_*" type="file"/>
        <!-- End added fields for Solr 3.4+ -->

        <!-- Sortable version of the dynamic string field -->
        <dynamicField name="sort_*" type="sortString" indexed="true" stored="false"/>
        <copyField source="ss_*" dest="sort_*"/>
        <!-- A random sort field -->
        <dynamicField name="random_*" type="rand" indexed="true" stored="true"/>
        <!-- This field is used to store access information (e.g. node access grants), as opposed to field data -->
        <dynamicField name="access_*" type="integer" indexed="true" stored="false" multiValued="true"/>


        <!-- ODS specific fields, mostly obtained by copyField -->
        <!-- ================================================= -->
        <!-- updated: single: because Drupal creates the other multivalued; single allows sorting -->
        <field name="updated" indexed="true" multiValued="false" type="tdate"/>
        <copyField source="dm_field_update_date" dest="updated" />

        <!-- loid: identifier of the learning object == unfortunately the field id is already taken -->
        <field name="loid" indexed="true" stored="true" multiValued="false" type="string"/>

        <!-- author: full name of the author (ODS internal or not) that last edited that resource -->
        <field name="author" indexed="true" stored="true" multiValued="false" type="string"/>

        <!-- source: identifier of the repository that provided the resource to ODS -->
        <field name="source" indexed="true" stored="true" multiValued="false" type="string"/>

        <!-- age: typical age range as text; still needs analysis for it to be facetted properly -->
        <field name="age" indexed="true" stored="true" multiValued="false" type="string"/>

        <!-- source: identifier of the repository that provided the resource to ODS -->
        <field name="copyright" indexed="true" stored="true" multiValued="false" type="text_ws"/>


        <!-- The following causes solr to ignore any fields that don't already match an existing
 field name or dynamic field, rather than reporting them as an error.
 Alternately, change the type="ignored" to some other type e.g. "text" if you want
 unknown fields indexed and/or stored by default -->
        <dynamicField name="*" type="ignored" multiValued="true" />

    </fields>

    <!-- Following is a dynamic way to include other fields, added by other contrib modules -->
    <xi:include href="schema_extra_fields.xml" xmlns:xi="http://www.w3.org/2001/XInclude">
        <xi:fallback></xi:fallback>
    </xi:include>

    <!-- Field to use to determine and enforce document uniqueness.
       Unless this field is marked with required="false", it will be a required field
    -->
    <uniqueKey>id</uniqueKey>

    <!-- field for the QueryParser to use when an explicit fieldname is absent -->
    <defaultSearchField>content</defaultSearchField>

    <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
    <solrQueryParser defaultOperator="AND"/>

</schema>
